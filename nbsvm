#!/bin/bash
[ "$debug" ] && set -x
set -e

# Define $class from whichever comes first of $class and $0-sans-vm-suffix
if [ -z "$class" -a "${0##*/}" != "nbsvm" ]; then
  class=${0##*/}
  class=${class%vm}
fi

# The first argument is always the VM
vm=$1
shift

# Load in reverse order so that $class overrides default when
# variables are set using the ${var:-default} syntax.
if [ -e /etc/nbsvm/"$class".class ]; then
  . /etc/nbsvm/"$class".class
fi
if [ -e /etc/nbsvm/default.class ]; then
  . /etc/nbsvm/default.class
fi

# "$vm".vm still needs to be loaded last, and after these variables
# are created, as it's what *uses* the defaults set here and in the
# .class files
store=${store:-lvm}
dev=${dev:-nbsvm${class:+-$class}-$vm}
drawer=${drawer:-/var/lib/nbsvm${class:+-$class}/$vm}
if [ -e /etc/nbsvm/${class:+$class-}$vm.vm ]; then
  . /etc/nbsvm/${class:+$class-}$vm.vm
fi

# Create $drive_devs from $prefix, $vg/$zpool and $dev
set_drive_devs() {
  if [[ "$store" == lvm ]]; then
    prefix=/dev/${vg:-vg0}/$dev
  elif [[ "$store" == zfs ]]; then
    prefix=/dev/zvol/${zpool:-tank}/$dev
  fi

  if [[ -e $prefix-0 ]]; then
    drive_devs=($prefix-[0-9])
    if [[ -e $prefix-10 ]]; then
      drive_devs+=($prefix-[0-9][0-9])
    fi
  else
    unset drive_devs
  fi
}

while [ "$1" ]; do
  # After removing the VM's name, each succeeding argument is the
  # command to run followed by *its* arguments. start's arguments are
  # terminated by a --, everything else expects a specific number of
  # arguments (usually 0).
  cmd=$1
  shift

  case "$cmd" in
    # A pure numerical argument is a number of seconds to
    # sleep. Mostly useful to wait between stopping and starting again
    # with: nbsvm foo stop 3 start
    [1-9]|[1-9][0-9]|[1-9][0-9][0-9]) # That'll do
      echo Idling for $cmd second\(s\)...
      sleep $cmd
      ;;

    # Create a[nother] drive image.
    newimg|newimage)
      set_drive_devs
      next=${#drive_devs[@]}
      if [[ "$store" == lvm ]]; then
        echo Creating ${drive_size:-10G} LV ${vg:-vg0}/$dev-$next for $vm.
        sudo lvcreate ${vg:-vg0} -L ${drive_size:-10G} -n "${lv_name:-$dev-$next}"
      elif [[ "$store" == zfs ]]; then
        echo Creating ${drive_size:-10G} ZFS volume ${zvol_name:-${zpool:-tank}/$dev-$next} for $vm.
        sudo zfs create -V ${drive_size:-10G} ${zvol_name:-${zpool:-tank}/$dev-$next}
      fi
      ;;

    # Take a snapshot of the zero'th (or $snapshot_id'th) drive image.
    # TODO: Needs some more thought. API unstable.
    snapshot)
      set_drive_devs
      next=${#drive_devs[@]}
      if [[ "$store" == lvm ]]; then
        source_dev=${source:-${vg:-vg0}/${snapshot_name:-$dev-${snapshot_id:-0}}}
        dest=$dev-${gold:-gold}
        echo Creating ${snapshot_size:-2G} snapshot $dest of $source_dev.
        sudo lvcreate -s /dev/$source_dev -L ${snapshot_size:-2G} -n $dest

      elif [[ "$store" == zfs ]]; then
        source_dev=${source:-${zpool:-tank}/${snapshot_name:-$dev-${snapshot_id:-0}}}
        dest=$source_dev@${gold:-gold}
        echo Creating ZFS snapshot $dest for $vm.
        sudo zfs snapshot $dest
      fi
      ;;

    # Clone or duplicate the gold image into a[nother] drive image.
    # TODO: Needs some more thought. API unstable.
    clone)
      set_drive_devs
      next=${#drive_devs[@]}
      if [[ "$store" == lvm ]]; then
        source_dev=${source:-${vg:-vg0}/${snapshot_name:-nbsvm${class:+-$class}${gold_vm:+-$gold_vm}-${gold:-gold}}}
        name=$dev-$next
        dest=${vg:-vg0}/$name
        echo Cloning $source_dev to LV $name for $vm.
        size=$(sudo lvs -o origin_size --units b --noheadings --nosuffix /dev/$source_dev)
        if [[ $size -eq 0 ]]; then
          size=$(sudo lvs -o lv_size --units b --noheadings --nosuffix /dev/$source_dev)
        fi
        sudo lvcreate ${vg:-vg0} -L ${size}b -n $name
        sudo dd if=/dev/$source_dev of=/dev/$dest bs="${bs:-${BLOCKSIZE:-1048576}}" ${ddopt:+$ddopt}

      elif [[ "$store" == zfs ]]; then
        source_dev=${source:-${zpool:-tank}/${snapshot_name:-nbsvm${class:+-class}${gold_vm:+-$gold_vm}@${gold:-gold}}}
        name=$dev-$next
        dest=${zpool:-tank}/$name
        echo Cloning ZFS snapshot $source_dev to $dest
        sudo zfs clone $source_dev $dest
      fi
      ;;

    # Start the VM.
    start)
      # Find extra arguments
      unset stop runargs
      while [ -n "$1" -a -z "$stop" ]; do
        if [ ."$1" = ."--" ]; then
          stop=1
        else
          runargs+=("$1")
        fi
        shift
      done
      if [ ${#runargs[@]} -ne 0 -a "${runargs[0]}" = "_" ]; then
          # Replace _ with $args if it's the first ...
          unset runargs[0]
          runargs=("${args[@]}" "${runargs[@]}")
      elif [ ${#runargs[@]} -ne 0 ]; then
	  _last=$((${#runargs[@]}-1))
	  # (nested in case $_last is invalid)
	  if [ "${runargs[$_last]}" = "_" ]; then
              # ... or last cli argument
              unset runargs[$((${#runargs[@]}-1))]
              runargs+=("${args[@]}")
	  fi
      elif [ ${#runargs[@]} -eq 0 ]; then
          # Use $args verbatim if no cli arguments are present. Can't
          # override $args with nothing, but "-k en-us" or
          # "-enable-kvm" can be used as a no-op.
          runargs=("${args[@]}")
      fi

      # Prepare filesystem
      sudo mkdir -p $drawer
      echo Laundering old socks.
      for sock in {qemu,serial0,vnc}.sock; do
        # Move socks to a backup file to enable recovery when
        # attempting to start a VM which is already running.
        if [ -e $drawer/$sock ]; then
            sudo mv -f $drawer/$sock $drawer/$sock~
        fi
      done

      # Launch binary
      echo Launching KVM \"$vm\"${class:+, type $class}.
      set_drive_devs
      sudo ${hypervisor:-kvm} --name $vm -m ${mem:-512}    \
        -serial unix:$drawer/serial0.sock,server,nowait    \
        -monitor unix:$drawer/qemu.sock,server,nowait      \
                                                           \
        ${drives:-${drive_devs[@]/#/-drive if=${drive_if:-virtio},file=}} \
                                                           \
        ${display:--display vnc=unix:$drawer/vnc.sock}     \
                                                           \
        ${usb:--usb -usbdevice tablet}                     \
                                                           \
        ${network:-
          -device ${net_if:-virtio-net-pci},netdev=net${mac:+,mac=$mac}
          -netdev tap,id=net,ifname=tap-${class:+$class-}$vm,script=no,downscript=no
        }                                                  \
                                                           \
        "${runargs[@]}" &

      # Footle socks (they're not gloves)
      echo -n Waiting for clean socks...
      count=0
      take_sock() {
        while ! ls "$1" >/dev/null 2>&1; do
          ((count+=1))
          if [ x"${count%[50]}" != x"$count" ]; then echo -n .; fi
          if [ $count -ge 60 ]; then
              echo Giving up waiting for "$1" >&2
              return # Don't return an error even though it is
          fi
          sleep 1
        done
        sudo chgrp ${group:-$(getent group $(id -g) | cut -d: -f1)} "$1"
        sudo chmod g+w "$1"
      }
      take_sock $drawer/qemu.sock
      take_sock $drawer/serial0.sock
      if [[ ! -v display || -v vncsock ]]; then
          take_sock $drawer/vnc.sock
      fi
      echo

      # Bring up network
      if [ -z "$network" ]; then
        echo Bringing up tap device tap-${class:+$class-}$vm
        sudo ifconfig tap-${class:+$class-}$vm up
        if [ "$bridge" ]; then
          echo Adding tap device to bridge $bridge
          sudo brctl addif $bridge tap-${class:+$class-}$vm
        fi
      fi

      # Execute a post-launch script
      if [ -e /etc/nbsvm/${class:+$class-}$vm.post ]; then
	  # Use a subshell to preserve this binary's environment
	  ( . /etc/nbsvm/${class:+$class-}$vm.post )
      fi
      ;;

    # Connect to the VM's serial console.
    console|serial|serial0)
      echo For reasons unknown, ^O is the panic button.
      socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$drawer/serial0.sock
      ;;

    # Connect to the hypervisor's console.
    monitor|kvm|qemu)
      echo For reasons unknown, ^O is the panic button.
      socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$drawer/qemu.sock
      ;;

    # Connect to the VM's VNC console.
    vnc)
      socat TCP-LISTEN:${vnc_port:-5900},reuseaddr,fork UNIX-CLIENT:$drawer/vnc.sock &
      vncviewer localhost:${vnc_port:-5900}
      ;;

    # Stop the VM without prejudice.
    stop|quit)
      echo quit | socat - UNIX-CONNECT:$drawer/qemu.sock
      ;;

    # Press the VM's off button.
    shutdown)
      echo system_powerdown | socat - UNIX-CONNECT:$drawer/qemu.sock
      ;;

    # Complain.
    *)
      echo Unknown command: $cmd. >&2
      exit 1
      ;;

  esac
done
