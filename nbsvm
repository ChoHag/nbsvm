#!/bin/sh
# No [[ ]] - might be in a real /bin/sh at this point
[ "$debug" ] && set -x
if [ -z "$BASH_VERSION" -a -z "$KSH_VERSION" ]; then
  _reexec=
  ksh -c : 2>/dev/null && _reexec=ksh
  [ -z "$_reexec" ] && bash -c : 2>/dev/null && _reexec=bash
  [ -n "$_reexec" ] && exec $_reexec "$0" "$@"
  echo "Cannot find a decent shell, or even bash" >&2
  exit 1
fi

set -e

# Define $class from whichever comes first of $class and $0-sans-vm-suffix.
if [[ -z "$class" && "${0##*/}" != "nbsvm" ]]; then
  class=${0##*/}
  class=${class%vm}
fi

# The first argument is always the VM's name.
vm=$1
shift

# Load in reverse order so that defaults are overridden by class and
# further by vm when using bash's ${variable:-default_value} syntax.
if [[ -e /etc/nbsvm/"${class:+$class-}$vm".vm ]]; then
  . /etc/nbsvm/"${class:+$class-}$vm".vm
fi
if [[ -e /etc/nbsvm/"$class".class ]]; then
  . /etc/nbsvm/"$class".class
fi
if [[ -e /etc/nbsvm/default.class ]]; then
  . /etc/nbsvm/default.class
fi

[[ "$(uname)" = OpenBSD ]] && _default_root=doas || _default_root=sudo
root=${root:-$_default_root}
store=${store:-lvm}
dev=${dev:-nbsvm${class:+-$class}-$vm}
[[ -e /var/lib ]] && _var=/var/lib || _var=/var
drawer=${drawer:-$_var/nbsvm${class:+-$class}/$vm}
if tty >/dev/null 2>&1; then
  : ${socat_tty:=-,raw,echo=0,escape=0x1d}
else
  : ${socat_tty:=-}
fi

# These are quite ugly but they DTRT in ksh and bash. Don't think
# about them too hard.
_copy_array() {
  local _clear=1
  if [[ "$1" = "--append" ]]; then shift; unset _clear; fi
  local _from="$1" _to="$2"
  [[ -n "$_clear" ]] && eval unset $_to
  eval "for arg in \"\${${_from}[@]}\"; do ${_to}[\${#${_to}[@]}]=\$arg; done"
}

_make_array() {
  local _clear=1
  if [[ "$1" = "--append" ]]; then shift; unset _clear; fi
  local _to="$1"; shift
  [[ -n "$_clear" ]] && eval unset $_to
  eval "for arg; do ${_to}[\${#${_to}[@]}]=\$arg; done"
}

# Create $drive_devs from $prefix, $vg/$zpool and $dev.
set_drive_devs() {
  if [[ "$store" == lvm ]]; then
    prefix=/dev/${vg:-vg0}/$dev
  elif [[ "$store" == zfs ]]; then
    prefix=/dev/zvol/${zpool:-tank}/$dev
  elif [[ "${store%%:*}" == file ]]; then
    prefix=${store#file:}/$dev
  fi

  unset drive_devs
  if [[ -e $prefix-0 ]]; then
    _make_array drive_devs $prefix-[0-9]
    if [[ -e $prefix-10 ]]; then
      _make_array --append drive_devs $prefix-[1-9][0-9]
    fi
  fi
}

while [[ -n "$1" ]]; do
  # After removing the VM's name, each succeeding argument is the
  # command to run followed by *its* arguments. start's arguments are
  # terminated by a --, everything else expects a specific number of
  # arguments (usually 0).
  cmd=$1
  shift

  case "$cmd" in
    # A numerical argument is a number of seconds to sleep. This is
    # mostly useful to wait between stopping and starting again with:
    #     nbsvm foo stop 3 start
    [1-9]|[1-9][0-9]|[1-9][0-9][0-9]) # That'll do.
      echo Idling for $cmd second\(s\)...
      sleep $cmd
      ;;

    # Print the drive[s] this VM will use to stdout.
    drives)
      set_drive_devs
      for dev in "${drive_devs[@]}"; do
        echo "$dev"
      done
      ;;

    # Create a[nother] drive image.
    newimg|newimage)
      set_drive_devs
      next=${#drive_devs[@]}
      if [[ "$store" == lvm ]]; then
        echo Creating ${drive_size:-10G} LV ${vg:-vg0}/$dev-$next for $vm.
        $root lvcreate ${vg:-vg0} -L ${drive_size:-10G} -n "${lv_name:-$dev-$next}"
      elif [[ "$store" == zfs ]]; then
        echo Creating ${drive_size:-10G} ZFS volume ${zvol_name:-${zpool:-tank}/$dev-$next} for $vm.
        $root zfs create -V ${drive_size:-10G} ${zvol_name:-${zpool:-tank}/$dev-$next}
      elif [[ "${store%%:*}" == file ]]; then
        echo Creating ${drive_size:-10G} file ${file_name:-${store#file:}/$dev-$next} for $vm.
        _gb=1073741824 # ie. 1024Â³
        # TODO: Warn if file exists? Remove it? Ensure it's big enough?
        dd if=/dev/zero of=${file_name:-${store#file:}/$dev-$next} bs=1 seek=$((${drive_size:-10}*$_gb-1)) count=1
      fi
      ;;

    # Take a snapshot of $source, or the zero'th (or $snapshot_id'th) drive image.
    # TODO: Needs some more thought. API unstable.
    snapshot)
      set_drive_devs
      next=${#drive_devs[@]}
      if [[ "$store" == lvm ]]; then
        source_dev=${source:-${vg:-vg0}/${snapshot_name:-$dev-${snapshot_id:-0}}}
        dest=$dev-${gold:-gold}
        echo Creating ${snapshot_size:-2G} snapshot $dest of $source_dev.
        $root lvcreate -s /dev/$source_dev -L ${snapshot_size:-2G} -n $dest

      elif [[ "$store" == zfs ]]; then
        source_dev=${source:-${zpool:-tank}/${snapshot_name:-$dev-${snapshot_id:-0}}}
        dest=$source_dev@${gold:-gold}
        echo Creating ZFS snapshot $dest for $vm.
        $root zfs snapshot $dest

      elif [[ "${store%%:*}" == file ]]; then
        source_dev=${source:-${store#file:}/${snapshot_name:-$dev-${snapshot_id:-0}}}
        dest=$source_dev-${gold:-gold}
        echo Creating file snapshot $dest for $vm.
        cp -p $source_dev $dest
      fi
      ;;

    # Clone or duplicate the gold image into a[nother] drive image.
    # TODO: Needs some more thought. API unstable.
    clone)
      set_drive_devs
      next=${#drive_devs[@]}
      if [[ "$store" == lvm ]]; then
        source_dev=${source:-${vg:-vg0}/${snapshot_name:-nbsvm${class:+-$class}${gold_vm:+-$gold_vm}-${gold:-gold}}}
        name=$dev-$next
        dest=${vg:-vg0}/$name
        echo Cloning $source_dev to LV $name for $vm.
        size=$($root lvs -o origin_size --units b --noheadings --nosuffix /dev/$source_dev)
        if [[ $size -eq 0 ]]; then
          size=$($root lvs -o lv_size --units b --noheadings --nosuffix /dev/$source_dev)
        fi
        $root lvcreate ${vg:-vg0} -L ${size}b -n $name
        $root dd if=/dev/$source_dev of=/dev/$dest bs="${bs:-${BLOCKSIZE:-1048576}}" ${ddopt:+$ddopt}

      elif [[ "$store" == zfs ]]; then
        source_dev=${source:-${zpool:-tank}/${snapshot_name:-nbsvm${class:+-$class}${gold_vm:+-$gold_vm}@${gold:-gold}}}
        name=$dev-$next
        dest=${zpool:-tank}/$name
        echo Cloning ZFS snapshot $source_dev to $dest
        $root zfs clone $source_dev $dest

      elif [[ "${store%%:*}" == file ]]; then
        source_dev=${source:-${store#file:}/${snapshot_name:-nbsvm${class:+-$class}${gold_vm:+-$gold_vm}-${gold:-gold}}}
        name=$dev-$next
        dest=${zpool:-tank}/$name
        echo Cloning file snapshot $source_dev to $dest
        cp -p $source_dev $dest
      fi
      ;;

    # Start the VM.
    start)
      # If qemu arguments are supplied on the command-line they
      # supercede $args from the config _unless_ the first or last cli
      # argument is '_', in which case it is replaced with $args
      unset stop runargs
      # Start by populating $runargs with the arguments from the cli
      # until '--' is reached or there are no more.
      while [[ $# != 0 && -z "$stop" ]]; do
        if [[ "$1" == "--" ]]; then
          stop=1
        else
          runargs[${#runargs[@]}]="$1"
        fi
        shift
      done

      # Replace _ with $args if it's the first cli argument.
      if [[ ${#runargs[@]} -ne 0 && "${runargs[0]}" = "_" ]]; then
        unset runargs[0]
        # First copy $args[@] and the remaining $runargs[@] into $full_args
        _copy_array args full_args
        _copy_array --append runargs full_args
        # Then copy $full_args into $runargs
        _copy_array full_args runargs
        unset full_args

      # _or_ replace _ with $args if it's the _last_ cli argument.
      elif [[ ${#runargs[@]} -ne 0 ]]; then
        _last=$((${#runargs[@]}-1)) # Separate variable as it could be -1
        if [[ $_last -ge 0 && "${runargs[$_last]}" = "_" ]]; then
          unset runargs[$_last]
          _copy_array --append args runargs
        fi

      # Finally if there are _no_ command-line arguments, use $args
      elif [[ ${#runargs[@]} -eq 0 ]]; then
        _copy_array args runargs
      fi

      # Prepare filesystem.
      $root mkdir -p $drawer
      echo Laundering old socks.
      for sock in $drawer/*.sock; do
        # Move socks to a backup file to enable recovery when
        # attempting to start a VM which is already running.
        if [[ -e $sock ]]; then
          $root mv -f $sock $sock~
        fi
      done

      # Launch binary.
      echo Launching KVM/Qemu VM \"$vm\"${class:+, type $class}.
      set_drive_devs
      unset drives_arg
      for _d in "${drive_devs[@]}"; do
        # Bash can do ${drive_decs[@]/#/...}, ksh can't
        drives_arg="$drives_arg -drive if=${drive_id:-virtio},file=$_d"
      done
      log=${log:-${debug:-/dev/null}}
      if [[ $log = 1 ]]; then log=/dev/stderr; fi
      $root ${hypervisor:-kvm} --name ${class:+$class-}$vm \
           -m ${mem:-512}                                  \
           ${smp:+-smp $smp}                               \
           -serial unix:$drawer/serial0.sock,server,nowait \
           -monitor unix:$drawer/qemu.sock,server,nowait   \
                                                           \
           ${drives:-$drives_arg}                          \
                                                           \
           ${display:--display vnc=unix:$drawer/vnc.sock}  \
                                                           \
           ${usb:--usb -usbdevice tablet}                  \
                                                           \
           ${network:-
             -device ${net_if:-virtio-net-pci},netdev=net${mac:+,mac=$mac}
             -netdev tap,id=net,ifname=tap-${class:+$class-}$vm,script=no,downscript=no
           }                                               \
                                                           \
           "${runargs[@]}" <"$log" 1>&0 2<&0 &

      # Footle socks (they're not gloves).
      echo -n Waiting for clean socks...
      count=0
      take_sock() {
        while ! ls "$1" >/dev/null 2>&1; do
          ((count+=1))
          # Print a '.' every ~5 seconds
          if [[ x"${count%[50]}" != x"$count" ]]; then echo -n .; fi
          if [[ $count -ge 60 ]]; then
            echo Giving up waiting for "$1" >&2
            return # Don't return an error even though it is.
          fi
          sleep 1
        done
        $root chgrp ${group:-$(getent group $(id -g) | cut -d: -f1)} "$1"
        $root chmod g+w "$1"
      }
      take_sock $drawer/qemu.sock
      take_sock $drawer/serial0.sock
      # If $display is set $vncsock can still be used to inform this
      # script where the vnc sock is.
      if [[ -z "$display" || -n "$vncsock" ]]; then # 3 feet?
        take_sock $drawer/vnc.sock
      fi
      echo

      # Bring up network.
      if [[ -z "$network" ]]; then
        echo Bringing up tap device tap-${class:+$class-}$vm
        $root ifconfig tap-${class:+$class-}$vm up
        if [ "$bridge" ]; then
          echo Adding tap device to bridge $bridge
          $root brctl addif $bridge tap-${class:+$class-}$vm
        fi
      fi

      # Execute a post-launch script.
      if [[ -e /etc/nbsvm/${class:+$class-}$vm.post ]]; then
        # Use a subshell to preserve this binary's environment.
        ( . /etc/nbsvm/${class:+$class-}$vm.post )
      fi
      ;;

    # Connect to the VM's serial console.
    console|serial|serial0)
      echo In a vain attempt to find an unused key, ^] is the default panic button
      socat "$socat_tty" UNIX-CONNECT:$drawer/serial0.sock
      ;;

    # Connect to the hypervisor's console.
    monitor|kvm|qemu)
      echo For reasons unknown, ^O is the default panic button.
      socat "$socat_tty" UNIX-CONNECT:$drawer/qemu.sock
      ;;

    # Connect to the VM's VNC console.
    vnc)
      socat TCP-LISTEN:${vnc_port:-5900},reuseaddr,fork UNIX-CLIENT:$drawer/vnc.sock &
      vncviewer localhost:${vnc_port:-5900}
      ;;

    # Print this VM's status (or the connection error) and exit with
    # non-zero if it's not running and this is the last command.
    status)
      # qemu's monitor is full of ansi escapes and other bullshit because of course it is.
      status=$(echo info status | socat - UNIX-CONNECT:$drawer/qemu.sock | grep -A1 info\ status | tail -n1 | tr -d \\r)
      echo "$status"
      if [[ $# = 0 ]]; then # No more commands.
        [[ "${status#*: }" = "running" ]]
      fi
      ;;

    # Stop the VM without prejudice.
    stop|quit)
      echo quit | socat - UNIX-CONNECT:$drawer/qemu.sock
      ;;

    # Press the VM's off button.
    shutdown)
      echo system_powerdown | socat - UNIX-CONNECT:$drawer/qemu.sock
      ;;

    # Complain.
    *)
      echo Unknown command: $cmd. >&2
      exit 1
      ;;

  esac
done
